// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/scheduler/api/pod_affinity/cluster_pod_affinity_info.go
//
// Generated by this command:
//
//	mockgen -source=pkg/scheduler/api/pod_affinity/cluster_pod_affinity_info.go -destination=pkg/scheduler/api/pod_affinity/mock_cluster_pod_affinity_info.go -package=pod_affinity
//

// Package pod_affinity is a generated GoMock package.
package pod_affinity

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	framework "k8s.io/kubernetes/pkg/scheduler/framework"
)

// MockClusterPodAffinityInfo is a mock of ClusterPodAffinityInfo interface.
type MockClusterPodAffinityInfo struct {
	ctrl     *gomock.Controller
	recorder *MockClusterPodAffinityInfoMockRecorder
	isgomock struct{}
}

// MockClusterPodAffinityInfoMockRecorder is the mock recorder for MockClusterPodAffinityInfo.
type MockClusterPodAffinityInfoMockRecorder struct {
	mock *MockClusterPodAffinityInfo
}

// NewMockClusterPodAffinityInfo creates a new mock instance.
func NewMockClusterPodAffinityInfo(ctrl *gomock.Controller) *MockClusterPodAffinityInfo {
	mock := &MockClusterPodAffinityInfo{ctrl: ctrl}
	mock.recorder = &MockClusterPodAffinityInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterPodAffinityInfo) EXPECT() *MockClusterPodAffinityInfoMockRecorder {
	return m.recorder
}

// AddNode mocks base method.
func (m *MockClusterPodAffinityInfo) AddNode(arg0 string, arg1 *framework.NodeInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddNode", arg0, arg1)
}

// AddNode indicates an expected call of AddNode.
func (mr *MockClusterPodAffinityInfoMockRecorder) AddNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNode", reflect.TypeOf((*MockClusterPodAffinityInfo)(nil).AddNode), arg0, arg1)
}

// UpdateNodeAffinity mocks base method.
func (m *MockClusterPodAffinityInfo) UpdateNodeAffinity(podAffinityInfo NodePodAffinityInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateNodeAffinity", podAffinityInfo)
}

// UpdateNodeAffinity indicates an expected call of UpdateNodeAffinity.
func (mr *MockClusterPodAffinityInfoMockRecorder) UpdateNodeAffinity(podAffinityInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeAffinity", reflect.TypeOf((*MockClusterPodAffinityInfo)(nil).UpdateNodeAffinity), podAffinityInfo)
}

// MockNodePodAffinityInfo is a mock of NodePodAffinityInfo interface.
type MockNodePodAffinityInfo struct {
	ctrl     *gomock.Controller
	recorder *MockNodePodAffinityInfoMockRecorder
	isgomock struct{}
}

// MockNodePodAffinityInfoMockRecorder is the mock recorder for MockNodePodAffinityInfo.
type MockNodePodAffinityInfoMockRecorder struct {
	mock *MockNodePodAffinityInfo
}

// NewMockNodePodAffinityInfo creates a new mock instance.
func NewMockNodePodAffinityInfo(ctrl *gomock.Controller) *MockNodePodAffinityInfo {
	mock := &MockNodePodAffinityInfo{ctrl: ctrl}
	mock.recorder = &MockNodePodAffinityInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodePodAffinityInfo) EXPECT() *MockNodePodAffinityInfoMockRecorder {
	return m.recorder
}

// AddPod mocks base method.
func (m *MockNodePodAffinityInfo) AddPod(arg0 *v1.Pod) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPod", arg0)
}

// AddPod indicates an expected call of AddPod.
func (mr *MockNodePodAffinityInfoMockRecorder) AddPod(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPod", reflect.TypeOf((*MockNodePodAffinityInfo)(nil).AddPod), arg0)
}

// HasPodsWithPodAffinity mocks base method.
func (m *MockNodePodAffinityInfo) HasPodsWithPodAffinity() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPodsWithPodAffinity")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasPodsWithPodAffinity indicates an expected call of HasPodsWithPodAffinity.
func (mr *MockNodePodAffinityInfoMockRecorder) HasPodsWithPodAffinity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPodsWithPodAffinity", reflect.TypeOf((*MockNodePodAffinityInfo)(nil).HasPodsWithPodAffinity))
}

// HasPodsWithPodAntiAffinity mocks base method.
func (m *MockNodePodAffinityInfo) HasPodsWithPodAntiAffinity() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPodsWithPodAntiAffinity")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasPodsWithPodAntiAffinity indicates an expected call of HasPodsWithPodAntiAffinity.
func (mr *MockNodePodAffinityInfoMockRecorder) HasPodsWithPodAntiAffinity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPodsWithPodAntiAffinity", reflect.TypeOf((*MockNodePodAffinityInfo)(nil).HasPodsWithPodAntiAffinity))
}

// Name mocks base method.
func (m *MockNodePodAffinityInfo) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockNodePodAffinityInfoMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockNodePodAffinityInfo)(nil).Name))
}

// RemovePod mocks base method.
func (m *MockNodePodAffinityInfo) RemovePod(arg0 *v1.Pod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePod", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePod indicates an expected call of RemovePod.
func (mr *MockNodePodAffinityInfoMockRecorder) RemovePod(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePod", reflect.TypeOf((*MockNodePodAffinityInfo)(nil).RemovePod), arg0)
}
