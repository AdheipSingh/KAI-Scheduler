// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/binder/binding/resourcereservation/resource_reservation.go
//
// Generated by this command:
//
//	mockgen -source=pkg/binder/binding/resourcereservation/resource_reservation.go -destination=pkg/binder/binding/resourcereservation/mock/resource_reservation_mock.go -package=mock_resourcereservation
//

// Package mock_resourcereservation is a generated GoMock package.
package mock_resourcereservation

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// RemovePodGpuGroupConnection mocks base method.
func (m *MockInterface) RemovePodGpuGroupConnection(ctx context.Context, pod *v1.Pod, gpuGroup string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePodGpuGroupConnection", ctx, pod, gpuGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePodGpuGroupConnection indicates an expected call of RemovePodGpuGroupConnection.
func (mr *MockInterfaceMockRecorder) RemovePodGpuGroupConnection(ctx, pod, gpuGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePodGpuGroupConnection", reflect.TypeOf((*MockInterface)(nil).RemovePodGpuGroupConnection), ctx, pod, gpuGroup)
}

// ReserveGpuDevice mocks base method.
func (m *MockInterface) ReserveGpuDevice(ctx context.Context, pod *v1.Pod, nodeName, gpuGroup string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveGpuDevice", ctx, pod, nodeName, gpuGroup)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReserveGpuDevice indicates an expected call of ReserveGpuDevice.
func (mr *MockInterfaceMockRecorder) ReserveGpuDevice(ctx, pod, nodeName, gpuGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveGpuDevice", reflect.TypeOf((*MockInterface)(nil).ReserveGpuDevice), ctx, pod, nodeName, gpuGroup)
}

// Sync mocks base method.
func (m *MockInterface) Sync(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockInterfaceMockRecorder) Sync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockInterface)(nil).Sync), ctx)
}

// SyncForGpuGroup mocks base method.
func (m *MockInterface) SyncForGpuGroup(ctx context.Context, gpuGroup string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncForGpuGroup", ctx, gpuGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncForGpuGroup indicates an expected call of SyncForGpuGroup.
func (mr *MockInterfaceMockRecorder) SyncForGpuGroup(ctx, gpuGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncForGpuGroup", reflect.TypeOf((*MockInterface)(nil).SyncForGpuGroup), ctx, gpuGroup)
}

// SyncForNode mocks base method.
func (m *MockInterface) SyncForNode(ctx context.Context, nodeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncForNode", ctx, nodeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncForNode indicates an expected call of SyncForNode.
func (mr *MockInterfaceMockRecorder) SyncForNode(ctx, nodeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncForNode", reflect.TypeOf((*MockInterface)(nil).SyncForNode), ctx, nodeName)
}
