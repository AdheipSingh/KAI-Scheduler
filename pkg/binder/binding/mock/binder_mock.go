// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/binder/binding/interface.go
//
// Generated by this command:
//
//	mockgen -source=pkg/binder/binding/interface.go -destination=pkg/binder/binding/mock/binder_mock.go -package=mock_binder
//

// Package mock_binder is a generated GoMock package.
package mock_binder

import (
	context "context"
	reflect "reflect"

	v1alpha2 "github.com/NVIDIA/KAI-scheduler/pkg/apis/scheduling/v1alpha2"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockInterface) Bind(ctx context.Context, task *v1.Pod, host *v1.Node, bindRequest *v1alpha2.BindRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", ctx, task, host, bindRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockInterfaceMockRecorder) Bind(ctx, task, host, bindRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockInterface)(nil).Bind), ctx, task, host, bindRequest)
}
